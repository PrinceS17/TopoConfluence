'''
This script is used to download ITZ topology, parse them to generate XML by FNSS,
, run ns-3 program to generation corresponding simulation, and collect the result
generated by multiRun.py. It is designed to be specific so no extension is 
expected. 
Note that python2 is needed to execute the fnss parse program.

Last update:        12.31.2019          All tests passed.

'''

# download to topology folder
# parse with itz-ns3.py, collect XML in xml folder
# run fnss-example, give topo path & topo as result name, and run setting
# move the result folders back to topoSurfer

from matplotlib import pyplot as plt
import os, sys, time, random

is_test = False


def test_ls(path=None):
    if path:
        os.chdir(path)
    tmp = os.popen('ls').read()
    tlist = tmp.strip().split('\n')
    return tlist


class TopoSurfer:
    def __init__ (self, root_folder=None):
        self.params, self.ranges = [], []
        if root_folder:
            os.chdir (root_folder)
        if 'TopoSurfer' in test_ls():
            self.root = os.path.join(os.getcwd(), 'TopoSurfer')
            os.chdir (self.root)
            return
        os.mkdir ('TopoSurfer')
        self.root = os.path.join(os.getcwd(), 'TopoSurfer')
        os.chdir ('TopoSurfer')
        os.mkdir ('topology')
        os.mkdir ('xml')
        os.mkdir ('result')
    

    def param_parse (self, args):
        ''' Read args of parameters from command line. '''
        for arg in args:
            if arg[0] == '-':
                self.params.append(arg[1:])
            elif len(self.params) - len(self.ranges) == 1:
                th1, step, th2 = arg.split(':')
                if self.params[-1] == 'tid' or self.params[-1] == 'mid':
                    self.ranges.append( (int(th1), int(step), int(th2)) )
                else:    
                    self.ranges.append( (float(th1), float(step), float(th2)) )
            else:
                print('Error: parameters must be followed by a range!')
                exit(1)


    def download (self, topo_path=None):
        ''' Download/copy ITZ topologies to topology subfolder. '''
        if topo_path == 'download':
            os.system ('git clone https://github.com/sk2/topologyzoo')
            self.topo_path = os.path.join (self.root, 'topologyzoo')
        else:
            self.topo_path = topo_path if topo_path else '/home/sapphire/Documents/topologyzoo'
        cp_cmd = 'cp %s/sources/* topology' % self.topo_path
        print (' - Copying from %s to topology/ ...' % os.path.join(self.topo_path, 'sources'))
        os.system (cp_cmd)


    def fnss_parse (self, py_path, delay=None, buffer_type=None, N=None):
        ''' Given path of python file, parse the topologies & collect xml files. '''
        delay = float(delay) if delay else 2
        buffer_type = buffer_type if buffer_type else 'bdp'
        N = int(N) if N else 10
        os.chdir(os.path.join(self.root, 'topology'))
        tmp = os.popen('ls').read()
        topo_list = tmp.strip().split('\n')
        indices = random.sample(range(len(topo_list)), N)
        print(' - Parsing %s topologies ...' % N)
        topo_list = [topo_list[i] for i in indices]
        for topology in topo_list:
            topo_path = os.path.join(os.getcwd(), topology)
            xml_folder = os.path.join(self.root, 'xml')
            parse_cmd = 'python2 %s %s %s -d %s -b %s' % (py_path, topo_path, xml_folder, delay, buffer_type)
            if is_test:
                print(parse_cmd)
            os.system (parse_cmd)
        os.chdir(self.root)
        self.topo_list = topo_list
    

    def run_simulation (self, prefix, run_path, ns3_path):
        ''' Given a prefix for result folder, multiRun.py path & ns3 path, 
            run ns-3 program & collect results. '''
        
        # e.g. python3 /path/multiRun.py -res surf-id_topology_xxxx -program fnss-example 
        #               -param min:step:max...
        if not ns3_path:
            ns3_path ='/home/sapphire/Documents/ns3_BBR/ns-3.27'
        surf_id = prefix
        for i in range(len(self.params)):
            rmin, rstep, rmax = self.ranges[i]
            surf_id += '-%s_%s:%s:%s' % (self.params[i], rmin, rstep, rmax)
        print(' -> surf id: %s' % surf_id)    
        os.chdir(ns3_path)
        os.system('rm -r %s*' % surf_id)

        # run through all topologies 
        for topology in self.topo_list:
            result_folder_name = surf_id + '_' + topology[:-8] + '_' + str(random.randint(1000, 9999))
            xml_file = os.path.join(self.root, 'xml', topology[:-8] + '*.xml')
            run_cmd = 'python3 %s -res %s -program fnss-example -topo %s' % (run_path, result_folder_name, xml_file)
            for param, rang in zip(self.params, self.ranges):
                run_cmd += ' -%s %s:%s:%s' % (param, rang[0], rang[1], rang[2])
            if is_test:
                print('  - running: %s \n' % run_cmd)
            else:
                print('  - running over: %s \n' % topology)
            os.system(run_cmd)
        
        # collect results
        os.chdir(self.root)
        collect_cmd = 'mv %s result/' % os.path.join(ns3_path, surf_id + '*')
        print(' -> Collecting results from ns3 to result/ ...')
        os.system(collect_cmd)


def test_output():
    ans = input('Are the commands above correct? (y/n) ')       # python2 specific
    if ans == 'n':
        print('Failed: commands aren\'t correct!')
        exit(1)


def test_surf():
    ''' Unit test of TopoSurfer class, command line argument parsing not included.'''
    root_folder = '/home/sapphire/Documents'
    print('- Begin testing: root folder = %s' % root_folder)
    surf0 = TopoSurfer(root_folder)
    try:
        os.chdir(os.path.join(root_folder, 'TopoSurfer'))       # TopoSurfer exists?
    except:
        print('Failed: TopoSurfer doesn\'t exist!')
        exit(1)
    subfolder = os.popen('ls').read()
    subfolder = subfolder.strip().split('\n')
    assert set(subfolder) == set(['topology', 'xml', 'result']) # subfolder structure correct?
    print('- __init__() test passed.\n')

    args = ['-a0', '0:1:1', '-b0', '1:2:3']
    surf0.param_parse(args)
    assert surf0.params == ['a0', 'b0']
    assert surf0.ranges == [(0, 1, 1), (1, 2, 3)]
    print('- param_parse() test passed.')

    surf0.download(os.path.join(root_folder, 'topologyzoo'))
    tlist = test_ls(os.path.join(surf0.root, 'topology'))
    assert len(tlist) == 261 and tlist[0] == 'Aarnet.graphml'   # copy right topologies?
    print('- download() test passed.\n')

    N = 6
    surf0.fnss_parse('/home/sapphire/testMulti/topo-parse.py', 7, 'bdp', N)
    test_output()
    tlist = test_ls(os.path.join(surf0.root, 'xml'))
    print(tlist)
    assert len(tlist) == N                                      # generated the XML files?
    print('- fnss_parse test passed.\n')

    surf0.run_simulation('unit-test', '/home/sapphire/testMulti/multiRun.py', None)
    test_output()
    tlist = test_ls(os.path.join(surf0.root, 'result'))
    print(tlist)
    assert len(tlist) == N                                      # results collected?
    print('- run_simulation test passed.\n')

    os.chdir(root_folder)
    os.system('rm -r TopoSurfer')

def input_check(opt_map):
    if opt_map['-f'][-2:] != 'py':
        print('Error: input topology parse script name isn\'t valid!')
        exit(1)
    if opt_map['-m'][-2:] != 'py':
        print('Error: input multiRun.py path isn\'t valid!')
        exit(1)

def surf(run_ns=False,
        root=None, 
        py_path='/home/sapphire/scpt/topo-parse.py',
        run_path='/home/sapphire/scpt/multiRun.py',
        topo_path=None,
        ns3_path=None):

    opt_map = {'-r':root,           # root folder where TopoSurfer will be created
               '-f':py_path,        # path to the topology parse script, including file name
               '-m':run_path,       # path to multiRun.py, including multiRun.py
               '-t':topo_path,      # directory where ITZ topologies are
               '-n':ns3_path,       # root folder of ns3.27
               '-p':'testSurf',     # prefix of result folder
               '-d':None,           # delay of every link
               '-b':None,           # buffer type: bdp, bw, constant, for parsing topology
               '-s':10              # number of samples among all topologies
               } 
    cur_option = None
    path_count = 0
    for arg in sys.argv[1:]:
        path_count += 1
        if arg in opt_map:
            cur_option = arg
        elif cur_option in opt_map:
            opt_map[cur_option] = arg
            cur_option = None
        else:
            break
    print(opt_map)
    input_check(opt_map)

    tsurf = TopoSurfer(opt_map['-r'])
    print(sys.argv[path_count:])
    if len(sys.argv[path_count:]) >= 2:
        tsurf.param_parse(sys.argv[path_count:])
    tsurf.download(topo_path=opt_map['-t'])
    tsurf.fnss_parse(py_path=opt_map['-f'], delay=opt_map['-d'], buffer_type=opt_map['-b'], N=opt_map['-s'])
    if run_ns:
        tsurf.run_simulation(prefix=opt_map['-p'], run_path=opt_map['-m'], ns3_path=opt_map['-n'])


if __name__ == "__main__":
    is_test = False
    if not is_test:
        if len(sys.argv) == 1:
            print('Usage: python %s [-r ROOT_FOLDER_PATH] [-f FNSS-PARSE_PATH] [-m MULTIRUN_PATH]' % sys.argv[0])
            print('     [-t TOPOLOGY_PATH] [-n NS3_PATH] [-p PREFIX] [-d DELAY] [-b BUFFER_TYPE]')
            print('     [-s SAMPLE_NUMBER] [-PARAM1 MIN:STEP:MAX] ...')
            print('     (All arguments are optional, but at least 1 should be specified.)\n')
            print(' Note that TOPOLOGY_PATH can be "download" to enable the download of ITZ dataset.')
            print(' And python2 should be available in current environment.')
            exit(1)
        surf()
    else:
        test_surf()

