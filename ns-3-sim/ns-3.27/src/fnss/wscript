# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

def build(bld):
    module = bld.create_ns3_module('fnss', ['core', 'internet', 'network', \
		'traffic-control', 'point-to-point', 'applications'])
    module.source = [
    'model/fnss-application.cpp',
    'model/edge.cpp',
    'model/event.cpp',
    'model/fnss-event.cc',
    'model/event-schedule.cpp',
    'model/measurement-unit.cpp',
    'model/fnss-node.cpp',
    'model/parser.cpp',
    'model/property-container.cpp',
    'model/protocol-stack.cpp',
    'model/quantity.cpp',
    'model/topology.cpp',
    'model/traffic-matrix.cpp',
    'model/traffic-matrix-sequence.cpp',
    'model/units.cpp',     
    'helper/fnss-simulation.cc',
    ]

    module_test = bld.create_ns3_module_test_library('fnss')
    module_test.source = [
        'test/fnss-test-suite.cc',
        ]

    headers = bld(features=['ns3header'])
    headers.module = 'fnss'
    headers.source = [
        'model/fnss-application.h',     
        'model/edge.h',
        'model/event.h',
        'model/fnss-event.h',
        'model/event-schedule.h',
        'model/measurement-unit.h',
        'model/fnss-node.h',
        'model/pair.h',
        'model/parser.h',
        'model/property-container.h',
        'model/protocol-stack.h',
        'model/rapidxml.hpp',
        'model/quantity.h',
        'model/topology.h',
        'model/traffic-matrix.h',
        'model/traffic-matrix-sequence.h', 
        'model/units.h',
        'helper/fnss-simulation.h',
        ]

    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    # bld.ns3_python_bindings()

